server:
  port: 8210
  servlet:
    context-path: /credentials

application:
  aws:
    sns:
      revocation-topic: ${REVOKE_TOPIC_ARN:}
    sqs:
      delete-placement: ${DELETE_PLACEMENT_QUEUE_URL:}
      delete-programme-membership: ${DELETE_PROGRAMME_MEMBERSHIP_QUEUE_URL:}
      update-placement: ${UPDATE_PLACEMENT_QUEUE_URL:}
      update-programme-membership: ${UPDATE_PROGRAMME_MEMBERSHIP_QUEUE_URL:}
  cache:
    key-prefix: Credentials
    time-to-live:
      verification-request: ${REDIS_TTL_VERIFICATION_REQUEST:300}
      verified-session: ${REDIS_TTL_VERIFIED_SESSION:600}
      credential-metadata: ${REDIS_TTL_ISSUING_FLOW:600}
  environment: ${ENVIRONMENT:local}
  gateway:
    host: https://${GATEWAY_HOST}
    organisation-id: ${GATEWAY_ORGANISATION_ID}
    client-id: ${GATEWAY_CLIENT_ID}
    client-secret: ${GATEWAY_CLIENT_SECRET}
    jwks-endpoint: ${application.gateway.host}/.well-known/openid-configuration/jwks
    issuing:
      par-endpoint: ${application.gateway.host}/oidc/par
      authorize-endpoint: ${application.gateway.host}/oidc/authorize?client_id=${application.gateway.client-id}
      token-endpoint: ${application.gateway.host}/oidc/token
      token:
        audience: ${application.gateway.host}/oidc
        issuer: ${application.gateway.client-id}
        signing-key: ${GATEWAY_TOKEN_SIGNING_KEY}
      redirect-uri: ${GATEWAY_ISSUING_REDIRECT_URI}
    verification:
      issuing-endpoint: ${application.gateway.host}/oidc
      authorize-endpoint: ${application.gateway.host}/oidc/authorizev1?client_id=${application.gateway.client-id}&response_type=code&redirect_uri=${application.gateway.verification.redirect-uri}&response_mode=query
      token-endpoint: ${application.gateway.host}/oidc/token
      redirect-uri: ${GATEWAY_VERIFICATION_REDIRECT_URI}
    revocation:
      revoke-credential-endpoint: ${application.gateway.host}/Revocation/revokecredential
  signature:
    secret-key: ${SIGNATURE_SECRET_KEY}

com:
  amazonaws:
    xray:
      emitters:
        daemon-address: ${AWS_XRAY_DAEMON_ADDRESS:}

sentry:
  dsn: ${SENTRY_DSN:}
  environment: ${application.environment}

spring:
  cloud:
    aws:
      endpoint: ${AWS_ENDPOINT:}
  data:
    mongodb:
      uri: mongodb://${DB_USER:admin}:${DB_PASSWORD:pwd}@${DB_HOST:localhost}:${DB_PORT:27017}/${DB_NAME:credentials}?authSource=${AUTH_SOURCE:admin}&readPreference=secondaryPreferred
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      ssl:
        enabled: ${REDIS_SSL:false}
      user: ${REDIS_USER:default}
      password: ${REDIS_PASSWORD:password}
